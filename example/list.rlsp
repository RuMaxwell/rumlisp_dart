(def LIST [1 2 3])
(len LIST) ; 3 ;
(car LIST) ; 1 ;
(cdr LIST) ; [2 3] ;

(def (nil s) (= (# s) 0))

; concat list (++) :: [a] -> [a] -> [a] ;
(def (++ s t)
  (if (nil s) t
  (if (nil t) s
    (: (. s) (++ (.. s) t)))))

; map :: (a -> b) -> [a] -> [b] ;
(def (map f s)
  (if (= (# s) 0) []
    (let x (. s)
    (let xs (.. s)
      (: (f x) (map f xs))))))

; filter :: (a -> Bool) -> [a] -> [a] ;
(def (filter f s)
  (if (nil s) []
    (let x (. s)
    (let xs (.. s)
      (if (f x)
        (: x (filter f xs))
        (filter f xs))))))

; quick sort :: [a] -> [a] ;
(def (sort s)
  (if (nil s) []
    (let x (. s)
    (let xs (.. s)
      (++
        (sort (filter (<= x) xs))
        (: x
        (sort (filter (> x) xs))))))))

(sort [5 3 4 2 1])

; last :: [a] -> a ;
(def (last s)
  (if (nil s) (error 0)
  (if (= 1 (# s)) (. s)
    (last (.. s)))))

(last []) ; error ;
(last [1 2 3]) ; 3 ;

; init :: [a] -> [a] ;
(def (init s)
  (if (nil s) (error 0)
  (if (= 1 (# s)) []
    (: (. s) (init (.. s))))))

(init []) ; error ;
(init [1 2 3]) ; [1 2] ;

; foldl :: (a -> b -> b) -> b -> [a] -> b ;
(def (foldl f acc s)
  (if (nil s) acc
    (foldl f (f acc (. s)) (.. s))))

(foldl (\ (x y) [x y]) 0 [1 2 3]) ; [[[0 1] 2] 3] ;

; foldl1 :: (a -> a -> a) -> [a] -> a ;
(def (foldl1 f s)
  (if (nil s) (error 0)
    (let acc (. s) (foldl f acc (.. s)))))

(foldl1 + [1 2 3]) ; 6 ;

; foldr :: (b -> a -> b) -> b -> [a] -> b ;
(def (foldr f acc s)
  (if (nil s) acc
    (foldr f (f (last s) acc) (init s))))

(foldr - 1 [8 4 2]) ; 5 ;

; foldr1 :: (a -> a -> a) -> [a] -> a ;
(def (foldr1 f s)
  (if (nil s) (error 0)
    (let acc (last s) (foldr f acc (init s)))))

(foldr1 * [2 4 3]) ; 24 ;
